Overall, the classes are reusable (with several potential improvements), and most of the calculations appeared to be correct.

Potential improvements of the code include:

The suite number is missing in the output of finding a property assessment by account number. The Address.toString() should return the suite number when it's available.

The print statements in PropertyAssessments should be moved to the client code (Lab2/3Main). These statements are not reusable in the GUI environment, and we want to make our classes as reusable as possible.

When possible, prefer primitive types (faster and simpler) than object types. For example, use int rather than Integer (see PropertyAssessments class).

Consider implementing the equals() and hashCode() methods when appropriate, e.g., in Address, Location, and Neighbourhood.

Why is PropertyAssessmentTest.testHashCode() empty? It should test to ensure that equal objects have the same hash code.

The statistics methods, e.g., getMedian(), should not be private. The main idea is allowing client code to call these methods so that they don't have to compute the statistics of data when they need it. Also, since computing statistics is the core of the PropertyAssessments class, each method must be tested. Otherwise, how can we be sure that the mean, median, and other values are correct?

Method names should be easy to understand. When a method starts with get (e.g., getPropertyAssessments), the caller expects to get some value. So, naming a method that returns void with get is counter-intuitive.

When n is even, getMedian() should return the average of two mid values.
